О git и его применении в работе, подборка топиков http://guide.avantajprim.com/?p=413
==================================================

1. Software Configuration Management // Распределенный контроль версий
------------------------------------------------------------------------
Приветствую. Как и обещал — продолжение цикла заметок об управлении конфигурацией ПО, в простонародье называемом Software Configuration Management. Весь цикл можно найти по ссылке на тэг CM. Из ещё неохваченного осталась буквально пара заметок.

Сегодня речь пойдет о довольно спорном и в чём-то провокационном вопросе — распределенных системах контроля версий. Знаю, что подобные системы популярны среди хабравчан, так что заранее готов в обсуждению. Более того — призываю не проходить мимо и высказаться, если есть что сказать по делу.

более подробно на хабре http://habrahabr.ru/blogs/pm/72370/

2. Командная работа в Git
------------------------------------------------------------------------
Во всем множестве статей по git’у, которые я смог найти в сети, не хватает одного существенного момента — описания командной работы. То, что обычно описывают как командную работу, на самом деле является просто работой с удаленным репозиторием.

Ниже я хочу описать свой опыт командной работы над проектом с использованием git’а.

подробнее в ЖЖ у автора (m-иванова) http://m-ivanov.livejournal.com/7988.html или на хабре http://habrahabr.ru/blogs/Git/75990/, кому как удобнее

3. Коллективная разработка с использованием git и Trac в проекте Midnight Commander
------------------------------------------------------------------------
Действительно, в интернете сейчас можно найти достаточно много информации о настройке GIT и работе с ним, но недостаточно освещен вопрос коллективной разработки и «рабочего процесса» отдельно взятого проекта от начала и до конца.

Попробую восполнить этот пробел на примере открытого проекта Midnight Commander, не останавливаясь на вопросах установки необходимого ПО, так как этот момент неплохо описан в интернете, и вы сможете легко найти интересующую вас дополнительную информацию самостоятельно.
Используемые термины и определения
тикет — отчёт об ошибках либо о пожеланиях, улучшениях. Иные названия — багрепорт и т.п.
бранч — ветвь разработки, существующая в системе контроля версий (в git)
апстрим — главная ветвь в системе контроля версий. Для git это обычно ветвь «master»
стабильная ветвь — ветвь отпочковавшаяся от ветви «master» тэгированная и выпущенная в качестве релиза (в дальнейшем сопровождается отдельно)

более подробно на хабре http://habrahabr.ru/blogs/development/76135/

4. десяток полезных советов
------------------------------------------------------------------------
ХХ полезных советов для пользователей Git среднего уровня. Часть 1

Вообще-то изначально я планировал перевести статью Энди Джеффриса (Andy Jeffries) 25 Tips for Intermediate Git Users, но в процессе я отбросил бестолковые, общеизвестные или самые простые советы вроде «настройте первым делом user.name и user.email», которые явно не подходят людям, уже более-менее плотно знакомым с Git.
 Взамен я дополню статью моментами из личной практики («Своя практика»! Звучит здорово, будто я частный врач или адвокат! :-] )

http://habrahabr.ru/blogs/Git/75728/

ХХ полезных советов для пользователей Git среднего уровня. Часть 2
------------------------------------------------------------------------

Это продолжение статьи ХХ полезных советов для пользователей Git среднего уровня

Про reset, незапланированно снова про альясы, про замечательный filter-branch, про мерджи и разрешение конфликтов с помощью rerere, про rebase (интерактивный и не очень) и, в завершение, про обслуживание своей гитницы.

http://habrahabr.ru/blogs/Git/76084/

5. Внешние зависимости в гите: submodule или subtree?
------------------------------------------------------------------------
Давным-давно я усвоил, что зависимости должны храниться вместе с кодом проекта. Тогда, при возврате к старой версии кода, гораздо проще восстанавливать окружение.

У моего проекта несколько зависимостей. Бóльшая часть зависимостей живет в гитовых репозиториях. Сам проект тоже живёт в гите.

Одна из используемых нами библиотек часто обновляется. Мы сидим на девелоперской версии, и нередко сами контрибутим в неё код, который требуется нашему проекту. То есть требуется оперативно пропускать наши правки через основной репозиторий этой библиотеки — создавать и поддерживать свой форк по ряду причин совершенно не хочется.

http://habrahabr.ru/blogs/Git/75964/

6. Пример использования хуков (hooks) в git
------------------------------------------------------------------------
Для того чтобы познакомиться с механизмом хуков в git, достаточно просто начать их использовать и посмотреть как оно работает, и как оно устроено внутри.
 Хуки в git это некие скрипты, срабатывающие на определенные события, по сути своей являются их обработчиками. Расположены они в каталоге .git/hooks.

Для примера попробуем сделать простенький обработчик. Его задача поместить в редактируемое описание к коммиту нужную нам информацию.

http://habrahabr.ru/blogs/Git/75063/

7. Особенности настройки git под windows
------------------------------------------------------------------------
Проблемы с русскими символами в git

Когда вы начнете работать с версией git под windows в командной строке, вы столкнётесь со следующей проблемой — все сообщения git, в которых фигурируют русские символы будут нечитаемы. Имена файлов, на русском языке, будут выглядеть так — «\362\345\361\362″, а тексты коммитов примерно так — <C8><ED><E8><F6><E8><E0><EB><E8><E7><E0><F6><E8><FF> <EF><F0><EE><E5><EA><F2><E0>. Т.е. исходная строка преобразуется в utf8 в соответствии с кодировкой latin1.

http://habrahabr.ru/blogs/Git/74839/