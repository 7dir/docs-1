Отправить локальную ветку в удалённый репозиторий (связь между ними не создаётся):
 git push origin feature

Отправить локальную ветку feature в удалённый репозиторий и 
автоматически привязать локальную ветку к удалённой (флаг -u)
 git push -u origin feature

Чтобы привязать уже существующую локальную ветку ветку к удаленной:
 git branch --set-upstream feature origin/feature

Выкачиваем и отслеживаем ветку из удалённого репозитория
 git checkout --track origin/feature
или
 git checkout --track -b my-branch-name origin/my-branch-name

Удаляем ветку:
git branch -d feature #В локальном репозитории
git push origin :feature #В удалённом репозитории

Переходим на ветку master
 git checkout master

Создать новую ветку и переключится на неё
 git branch new_branch 
 git checkout new_branch
либо сразу
 git checkout -b new_branch

Переименовать текущий бранч:
git branch -m new_name

Переименовать любой бранч:
git branch -m current_name new_name

# Вытаскиваем основную ветку разработки
git checkout --track origin/devel

# Добавление сабмодуля в проект (rsajob/limb.git)
git submodule add git@github.com:rsajob/limb.git lib/limb

1) Допустим у нас появилось свободное время и мы хотим чтоб наш проект работал с последней версией субмодуля:
 Заходим в директорию субмодуля
cd src/vendor/symfony/
Обновляем субмодуль
git checkout -f

2) Допустим кто-то хочет развернуть ваш проект в своей локальной директории:
Первым делом клонирует проект
git clone ... [your_project.git]

Если теперь зайти в директории субмодулей — обнаружим что они пусты. 
Для восстановления целостного проекта нужно клонировать нужные версии субмодулей. 
Переходим в корень проекта и запускаем команду 
git submodule update --init

Если выдаёт ошибку Clone of 'git@github.com:rsajob/limb.git' into submodule path 'lib/limb' failed
то надо в модулях поменять ссылки на Read-only версию
git://github.com/rsajob/limb.git
git config submodule.lib/limb.url git://github.com/rsajob/limb.git
